Sandeep Singh

Homework 20

1)	Event propagation?
•	It determines in which order the elements receive the event. Suppose if have an event listener on both parent and child element, and they are same event type, and you performed the event on child element. If you click on event listener on both parent and child element and suppose if I click on the child element, then the order event handler happens is called event propagation. 

2)	What is event bubbling?
•	In case of event bubbling, the event is first captured and handled by the innermost element and then it is propagated to outer elements. The syntax for event bubbling is this:

parentElement.addEventListener('eventtype', eventHandlerFunction, false);
or
parentElement.addEventListener('eventtype', eventHandlerFunction);

childElement.addEventListener('eventtype', eventHandlerFunction);

When the event is clicked and performed on a child then the child event handler is invoked first followed by parent event handler.

3)	What is event capturing?
•	In case of event capturing, the event is first captured by the outermost element and then propagated to the inner elements. The syntax for event capturing is this: 

parentElement.addEventListener('eventtype', eventHandlerFunction, true);
or 
childElement.addEventListener('eventtype', eventHandlerFunction);

When the event is performed or clicked on a child then the parent event handler is invoked first followed by the child event handler. 

4)	ECMA Script?
•	ECMAScript is a standard for scripting language, and the Javascript language is based on the ECMAScript. Particularly, the core features are based on ECMAScript standard. 

5)	ECMA Script 6 features, how to use them?
•	There are many different types of ECMAScript features. Some of those are:
	Arrows: are a function shorthand using the => syntax. Arrows share the same lexical this as their surrounding code. 
	Classes: they support prototype-based inheritance, super calls, instance and static methods and constructors. 
	Enhanced object literals: they support setting the prototype at construction, shorthand for foo. 
	Template strings: it allows for string construction to be customized. 
	Destructing: allow binding using pattern matching, with support for matching arrays and objects. 
	Generators: simplify iterator-authoring using function* and yield. 
	Symbols: enable access control for object state. They allow properties to be keyed by either string or symbol. 
	Promises: are a library for synchronous programming. 


References
•	http://stackoverflow.com/questions/4616694/what-is-event-bubbling-and-capturing
•	http://www.programmerinterview.com/index.php/javascript/javascript-what-is-ecmascript/
•	https://github.com/lukehoban/es6features
•	https://developer.mozilla.org/en-US/docs/Web/JavaScript/New_in_JavaScript/ECMAScript_6_support_in_Mozilla
•	http://javascript.info/tutorial/bubbling-and-capturing